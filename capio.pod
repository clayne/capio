=head1 NAME

capio - trace and capture process I/O

=head1 SYNOPSIS

    capio [-f] [-q] [-F] [-lfd]... [-ppid]... [-mformat] [-ofile] \
          [-nexe_pattern]... -N[fn_pattern]...                    \
          [-eperl_oneliner] [-Eperl_oneliner] [-Mperl_script]     \
          [-- command [args]]

=head1 DESCRIPTION

In the simplest case B<capio> runs the specific command until it
exits. It monitors I/O syscalls and dumps the data being passed.

B<capio> provides options that can be used to target some specific
programs and file descriptors, can dump its data in several formats.

For more complex usage scenarios B<capio> can embed a perl interpreter
that can be used to analyze the data as it is generated using custom
scripts.

=head1 OPTIONS

=over 4

=item -f

Follow child processes as they are created by currently traced
processes as a result of the L<fork(2)>, vfork(2) and clone(2) system
calls and capture their output too.

=item -F

Don't follow file descriptor duplications.

When the user picks a specific set of file descriptors for capturing,
by default, B<capio> takes into account operations duplicating file
descriptors and dumps the information related to both the picked file
descriptors and their duplicates.

This flag, disables that feature restricting the operations being
monitored to those involving the file descriptors picked by the user
strictly.

=item -l I<fd>

Dump data passing through the given file descriptor only. This flag
can be given several times.

=item -p I<pid>

Attach to the process with PID I<pid> and begin tracing.  The trace
may be terminated at any time by a keyboard interrupt signal
(CTRL-C). B<capio> will respond by detaching itself from the traced
process(es) leaving it (them) to continue running.  Multiple B<-p>
options can be used to attach to many processes in addition to command
(which is optional if at least one B<-p> option is given).

=item -m I<format>

Pick the output format for the captured data. The available formats
are as follows:

=over 4

=item C<x>

hexdump - dump the data in hexedecimal.

=item C<q>

quote - dump the data as C strings with control and non printable
charaters escaped.

=item C<n>

quote with new lines - as quote mode but break the output at LF
characters.

=item C<r>

raw - dump the data without any processing

=item C<0>

nothing - dump nothing

=back

=item -o I<file>

Write the captured data to the given file rather than to stdout.

=item -n I<exe_pattern>

Captures the data only when the name of the process matches the given
file name pattern. This flag can be passed multiple times.

=item -N I<fn_pattern>

Captures the data only when the name of the file attached to the file
descriptor matches the given pattern. This flag can be passed
multiple times.

File descriptors are resolved into file names looking at
C</proc/$pid/fd/$fd>. Pipes and sockets appear there as
C<pipe:[$id]> and C<socket:[$id]> respectively, so for instance,
the following command captures only I/O operations on pipes:

    capio -N "pipe:*" ...

=item -q

Dumps only the captured data, suppresing any syscall information.

=item -E <perl_one_liner>

I<Not implemented yet!>

Calls the given Perl code for every I/O operation.

=item -e <perl_one_liner>

Calls the given Perl code for every I/O operation carrying a data load.

See L</Perl scripting> below.

=item -M <perl_script>

Loads the given Perl script which must define a subroutine named C<_>
(yes, underscore!) to be called for every I/O operation on the traced
process.

See L</Perl scripting> below.

=back

=head1 PERL SCRIPTING

In order to allow for complex processing of the data captured from the
traced processes, it is possible to compile C<capio> with an embeded
Perl interpreter.

Perl support is far for being complete yet, but none the less, it is
already useful.

The embeded Perl interpreter can be invoked with the C<-M> flag with
takes the name of a perl script or with the C<-e> or C<-E> flags which
take directly a chunk of perl code (AKA one-liner).

The difference between C<-e> and C<-E> been that the former calls the
code only for operations carrying a data load while the second calls
it for every traced syscall.

In the case of using C<-M>, the given script must define the
subroutine C<_> which would be called for every traced syscall.

In the case of using C<-e> or C<-E> the subroutine C<_> is created
automatically using the given chunk of code as its body.

The following global variables are used to pass information to the Perl side:

=over 4

=item C<$_>

The data load

=item C<$PID>

The process Id.

=item C<$OP>

The syscall name.

=item C<$FD>

The file descriptor number.

=item C<$DIR>

The direction of the data, C<R> for read operations and C<W> for write operations.

=item C<$R>

Bool variable indicating it is a read operation.

=item C<$W>

Bool variable indicating it is a write operation.

=item C<$FN>

The filename associated to the file descriptor.

=item C<$EXE>

The process executable path.

=item C<$RC>

The syscall return code.

=item C<$MEM>

The memory address for the data on the traced process.

=item C<$LEN>

The length of the data load.

=back

The B<capio> distribution has an C<examples> directory which several
scripts that can be used for learning.

=head1 EXAMPLES

Some examples of C<capio> usage follow:

=over 4

=item Monitoring tea4cups IPP requests

B<capio> was initially written for examining how L<cupsd(8)>
interacted with its backends. The following command shows the dialogs
with B<tea4cups> slave processes:

    sudo ./capio -f -n "/*/python*" -p `pidof cupsd` \
         -N 'socket:*' -M examples/ipp.pl

=item The underdocumented SCP protocol

Have you ever wondered how SCP works under the hood?

      capio -f -l5 -l6 -n "*/ssh" \
            scp localhost:/etc/passwd /tmp/passwd

=back

=head1 BUGS AND SUPPORT

B<capio> is still a young program, it may contain lots of bugs and
miss features some people may find essential. Don't hesitate to report
them (or to contribute patches) using the bug tracker at
L<https://github.com/salva/capio>.

=head1 COPYING

Copyright (c) 2017 Salvador FandiE<ntilde>o (sfandino@yahoo.com).

B<capio> is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

